// Generated by CoffeeScript 1.9.2
(function() {
  var PouchDB, _, dbNameError, methods, settings;

  PouchDB = require('pouchdb');

  _ = require('underscore');

  dbNameError = function() {
    throw new Error('A database name must be specified');
  };

  methods = {
    'create': 'post',
    'update': 'put',
    'patch': 'put',
    'delete': 'remove',
    'read': 'get'
  };

  settings = {
    defaults: {
      dbName: null,
      fetch: 'allDocs'
    }
  };

  module.exports = function(defaults) {
    var adapter, db;
    defaults = defaults || {};
    defaults = _.extend(settings.defaults, defaults);
    db = new PouchDB(defaults.dbName);
    adapter = function(method, model, options) {
      var actions, code;
      options = options || {};
      options = _.extend(defaults, model && model.pouch || {}, options);
      actions = {
        get: function() {
          var query;
          if (model._id != null) {
            return db.get(model._id).then(function(response) {
              return options.success(response);
            })["catch"](function(err) {
              return options.error(err);
            });
          } else if (options.fetch === 'allDocs') {
            return db.allDocs({
              include_docs: true
            }).then(function(response) {
              return options.success(response);
            })["catch"](function(err) {
              return options.error(err);
            });
          } else {
            query = function(q) {
              return db.query(q).then(function(response) {
                return options.success(response);
              })["catch"](function(err) {
                return options.error(err);
              });
            };
            if (options.options[options.fetch].fun != null) {
              return query(options.options[options.fetch].fun);
            } else {
              return db.get(options.options[options.fetch]).then(function(response) {
                return query(options.options[options.fetch]);
              })["catch"](function(err) {
                return options.error(err);
              });
            }
          }
        },
        post: function() {
          return db.post(model.toJSON()).then(function(response) {
            model._id = response.id;
            model._rev = response.rev;
            return options.success(model, response, options);
          })["catch"](function(err) {
            return options.error(err);
          });
        },
        put: function() {
          return db.put(model.toJSON(), model._id, model._rev).then(function(response) {
            model._rev = response.rev;
            return options.success(model, response, options);
          })["catch"](function(err) {
            return options.error(err);
          });
        },
        remove: function() {
          return db.remove(model._id, model._rev).then(function(response) {
            return options.success();
          })["catch"](function(err) {
            return options.error(err);
          });
        }
      };
      code = methods[method];
      return actions[code]();
    };
    adapter.defaults = defaults;
    return adapter;
  };

}).call(this);
